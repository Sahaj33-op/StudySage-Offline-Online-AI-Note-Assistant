# core/export_pdf.py
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen import canvas
from reportlab.lib.colors import HexColor
from pathlib import Path
from typing import List, Dict
from datetime import datetime

# Import configuration
try:
    from config import OUTPUT_DIR
except ImportError:
    OUTPUT_DIR = "output"

LOGO = Path("assets/images/logo.png")  # single place
OUTDIR = Path(OUTPUT_DIR)
OUTDIR.mkdir(exist_ok=True)

# Define colors for better visual design
PRIMARY_COLOR = HexColor("#4A90E2")  # StudySage blue
ACCENT_COLOR = HexColor("#50C878")   # Green for correct answers
TEXT_COLOR = HexColor("#333333")
LIGHT_GRAY = HexColor("#EEEEEE")
DARK_GRAY = HexColor("#666666")

def _draw_header(cnv: canvas.Canvas, title: str, page_num: int = 1):
    """Draw an enhanced header with logo, title, and page information."""
    width, height = A4
    
    # Draw a subtle header background
    cnv.setFillColor(PRIMARY_COLOR)
    cnv.rect(0, height - 80, width, 80, stroke=0, fill=1)
    
    # Draw logo if available
    if LOGO.exists():
        try:
            cnv.drawImage(ImageReader(LOGO.as_posix()), 40, height - 70, width=50, height=50, preserveAspectRatio=True, mask='auto')
        except Exception:
            pass
    
    # Draw title
    cnv.setFillColor(HexColor("#FFFFFF"))  # White text
    cnv.setFont("Helvetica-Bold", 20)
    cnv.drawString(100, height - 45, "StudySage")
    cnv.setFont("Helvetica", 14)
    cnv.drawString(100, height - 65, title)
    
    # Draw page number
    cnv.setFont("Helvetica", 10)
    cnv.drawRightString(width - 40, height - 65, f"Page {page_num}")
    
    # Draw date and time
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    cnv.drawString(100, height - 25, current_time)
    
    # Reset fill color for content
    cnv.setFillColor(TEXT_COLOR)

def _draw_footer(cnv: canvas.Canvas, text: str = "Generated by StudySage AI Assistant"):
    """Draw a footer with additional information."""
    width, height = A4
    cnv.setFillColor(DARK_GRAY)
    cnv.setFont("Helvetica", 8)
    cnv.drawCentredString(width/2, 20, text)
    cnv.setFillColor(TEXT_COLOR)

def _wrap_text(text: str, max_width: int = 80) -> List[str]:
    """Wrap text to fit within a specified width."""
    words = text.split()
    lines = []
    current_line = []
    current_length = 0
    
    for word in words:
        if current_length + len(word) + 1 > max_width:
            if current_line:
                lines.append(" ".join(current_line))
                current_line = [word]
                current_length = len(word)
            else:
                # Handle very long words
                lines.append(word[:max_width])
                current_line = [word[max_width:]]
                current_length = len(current_line[0]) if current_line[0] else 0
        else:
            current_line.append(word)
            current_length += len(word) + 1
    
    if current_line:
        lines.append(" ".join(current_line))
    
    return lines if lines else [""]

def export_summary_to_pdf(summary: str) -> str:
    """Export summary to a professionally designed PDF."""
    out = OUTDIR / "summary.pdf"
    cnv = canvas.Canvas(out.as_posix(), pagesize=A4)
    
    # Set document metadata
    cnv.setTitle("StudySage Summary")
    cnv.setAuthor("StudySage AI Assistant")
    cnv.setSubject("AI-Generated Summary")
    
    width, height = A4
    page_num = 1
    
    # Draw header
    _draw_header(cnv, "Document Summary", page_num)
    
    # Content settings
    cnv.setFont("Helvetica", 12)
    x, y = 40, height - 100
    line_height = 18
    
    # Add a subtitle
    cnv.setFillColor(PRIMARY_COLOR)
    cnv.setFont("Helvetica-Bold", 14)
    cnv.drawString(x, y, "Summary Content")
    y -= 30
    cnv.setFillColor(TEXT_COLOR)
    cnv.setFont("Helvetica", 12)
    
    # Process summary text with better wrapping
    lines = summary.splitlines()
    for line in lines:
        if not line.strip():
            y -= line_height
            continue
            
        # Wrap long lines
        wrapped_lines = _wrap_text(line, 90)
        for wrapped_line in wrapped_lines:
            if y < 80:  # Need new page
                _draw_footer(cnv)
                cnv.showPage()
                page_num += 1
                _draw_header(cnv, "Document Summary", page_num)
                cnv.setFont("Helvetica", 12)
                y = height - 100
            
            cnv.drawString(x, y, wrapped_line)
            y -= line_height
    
    _draw_footer(cnv)
    cnv.save()
    return out.as_posix()

def export_quiz_to_pdf(questions: List[Dict[str, object]]) -> str:
    """Export quiz to a professionally designed PDF."""
    out = OUTDIR / "quiz.pdf"
    cnv = canvas.Canvas(out.as_posix(), pagesize=A4)
    
    # Set document metadata
    cnv.setTitle("StudySage Quiz")
    cnv.setAuthor("StudySage AI Assistant")
    cnv.setSubject("AI-Generated Quiz Questions")
    
    width, height = A4
    page_num = 1
    
    # Draw header
    _draw_header(cnv, "Quiz Questions", page_num)
    
    # Content settings
    cnv.setFont("Helvetica", 12)
    x, y = 40, height - 100
    line_height = 20
    question_spacing = 30
    option_spacing = 18
    
    # Add a subtitle
    cnv.setFillColor(PRIMARY_COLOR)
    cnv.setFont("Helvetica-Bold", 14)
    cnv.drawString(x, y, f"Total Questions: {len(questions)}")
    y -= 30
    cnv.setFillColor(TEXT_COLOR)
    cnv.setFont("Helvetica", 12)
    
    # Process each question
    for i, q in enumerate(questions, 1):
        if y < 120:  # Need new page
            _draw_footer(cnv)
            cnv.showPage()
            page_num += 1
            _draw_header(cnv, "Quiz Questions", page_num)
            cnv.setFont("Helvetica", 12)
            y = height - 100
            # Repeat subtitle on new page
            cnv.setFillColor(PRIMARY_COLOR)
            cnv.setFont("Helvetica-Bold", 14)
            cnv.drawString(x, y, f"Total Questions: {len(questions)}")
            y -= 30
            cnv.setFillColor(TEXT_COLOR)
            cnv.setFont("Helvetica", 12)
        
        # Question number and text
        cnv.setFillColor(PRIMARY_COLOR)
        cnv.setFont("Helvetica-Bold", 12)
        cnv.drawString(x, y, f"Question {i}:")
        y -= line_height
        
        cnv.setFillColor(TEXT_COLOR)
        cnv.setFont("Helvetica", 12)
        
        # Wrap and draw question text
        question_text = str(q.get('question', ''))
        question_lines = _wrap_text(question_text, 85)
        for line in question_lines:
            if y < 120:  # Need new page
                _draw_footer(cnv)
                cnv.showPage()
                page_num += 1
                _draw_header(cnv, "Quiz Questions", page_num)
                cnv.setFont("Helvetica", 12)
                y = height - 100
            
            cnv.drawString(x + 20, y, line)
            y -= line_height
        
        y -= 10  # Small space before options
        
        # Options
        cnv.setFont("Helvetica", 11)
        options = q.get('options', [])
        if isinstance(options, list):
            for j, opt in enumerate(options, 1):
                if y < 120:  # Need new page
                    _draw_footer(cnv)
                    cnv.showPage()
                    page_num += 1
                    _draw_header(cnv, "Quiz Questions", page_num)
                    cnv.setFont("Helvetica", 12)
                    y = height - 100
                
                cnv.drawString(x + 30, y, f"{chr(64+j)}. {str(opt)}")  # A, B, C, D...
                y -= option_spacing
        
        y -= 10  # Space before answer
        
        # Answer
        if y < 120:  # Need new page
            _draw_footer(cnv)
            cnv.showPage()
            page_num += 1
            _draw_header(cnv, "Quiz Questions", page_num)
            cnv.setFont("Helvetica", 12)
            y = height - 100
        
        answer_text = str(q.get('answer', ''))
        cnv.setFillColor(ACCENT_COLOR)
        cnv.setFont("Helvetica-Bold", 11)
        cnv.drawString(x + 30, y, f"Correct Answer: {answer_text}")
        cnv.setFillColor(TEXT_COLOR)
        y -= question_spacing
    
    _draw_footer(cnv, "StudySage Quiz - Test your knowledge!")
    cnv.save()
    return out.as_posix()